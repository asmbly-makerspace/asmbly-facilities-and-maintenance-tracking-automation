# template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  A collection of Lambda functions for PM automation tasks,
  fetching data from ClickUp and sending notifications to Slack.

Globals:
  Function:
    Runtime: python3.12
    MemorySize: 128

Resources:
  # 1. Define the API Gateway for the new reorder functions
  FacilitiesApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod

  # 2. Define the Shared Lambda Layers
  RequestsLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: requests-layer
      Description: "Shared layer containing the requests library"
      ContentUri: layers/requests_layer/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain

  CommonHelpersLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: common-helpers-layer
      Description: "Shared layer containing common helper functions for aws, clickup, and slack"
      ContentUri: layers/common_helpers/
      CompatibleRuntimes:
        - python3.12
      RetentionPolicy: Retain

  # 3. Define the Kiln Drop-off Viewer Function
  GetClickUpTasksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: KilnOpsDropoffRecentEntriesViewer
      Description: "https://gist.github.com/sababado/aa8c92c0f9f4488c701523c6fd995c6b"
      CodeUri: functions/kiln_dropoff_recent_entries_viewer/
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Timeout: 10
      Role: arn:aws:iam::110104886034:role/KilnOpsDropoffViewerLambdaRole
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref CommonHelpersLambdaLayer
      Environment:
        Variables:
          SECRET_NAME: clickup/api/token
          CLICKUP_LIST_KILNDROP_ID: 901318902829
      Tags:
        Project: kilnops-dropoff-viewer
        Workspace: ceramics

  # 4. Define the IAM Role for the PMReminderBot
  PMReminderBotLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: PMReminderBotLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: PMReminderBotPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:clickup/api/token-*'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/slack-maintenance-bot-token-*'
      Tags:
        - Key: Project
          Value: pm-reminder-bot
        - Key: Workspace
          Value: facilities

  # 5. Define the Slack Poster Lambda Function (Scheduled)
  PMReminderBotFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PMReminderBot
      Description: "https://gist.github.com/sababado/78b9714938e1f4ef001361654b8464e2"
      CodeUri: functions/pm_bot_reminder/
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      Timeout: 180
      Role: !GetAtt PMReminderBotLambdaRole.Arn # Use the role defined in this template
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref CommonHelpersLambdaLayer
      Environment:
        Variables:
          DRY_RUN: 'false'
          BOT_ICON_EMOJI: ':hammer_and_wrench:'
          BOT_NAME: 'PM Bot'
          CLICKUP_LIST_ID: '901310894771'
          CLICKUP_SECRET_NAME: 'clickup/api/token'
          GENERAL_CHANNEL_NAME: 'stewards'
          SLACK_MAINTENANCE_BOT_SECRET_NAME: 'prod/slack-maintenance-bot-token'
          WORKSPACES: '3d-printing,ceramics,electronics,lasers,metal-shop,textiles,woodshop'
          CLICKUP_ASSET_FIELD_ID: '487e2b73-8329-4ce2-a0a1-1b83a6069ed1'
          CLICKUP_FREQUENCY_FIELD_ID: 'b0d864da-9018-4935-ae65-7a9103bf70d2'
          CLICKUP_WORKSPACE_FIELD_ID: 'f4923783-74db-42ca-bda3-82bbca58abfe'
          STARTER_MESSAGE_TEXT: |
            Weekly task update!
            * Mark tasks with :loading: to show that they're being worked on!
            * Mark tasks with :white_check_mark: to call them done!
      Events:
        ScheduledRun:
          Type: Schedule
          Properties:
            Schedule: "cron(30 4 ? * SAT *)"
            Description: "Triggers the lambda task fetcher every Saturday morning"
      Tags:
        Project: pm-reminder-bot
        Workspace: facilities

  # 6. Define the IAM Role for the Facilities Slack Reorder Function
  FacilitiesItemReorderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: FacilitiesItemReorderLambdaRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: FacilitiesItemReorderPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:clickup/api/token-*'
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:prod/slack-maintenance-bot-token-*'
      Tags:
        - Key: Project
          Value: facilities-item-reorder
        - Key: Workspace
          Value: facilities

  # 7. Define the Facilities Slack Purchase Reorder Lambda Function
  FacilitiesSlackPurchaseReorderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: FacilitiesSlackPurchaseReorder
      Description: "Handles Slack interactions for reordering facilities items. It opens a modal for item selection and processes the submission to create a purchase request in ClickUp."
      CodeUri: functions/facilities_slack_purchase_reorder/
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      MemorySize: 512
      Timeout: 10
      Role: !GetAtt FacilitiesItemReorderLambdaRole.Arn
      Layers:
        - !Ref RequestsLambdaLayer
        - !Ref CommonHelpersLambdaLayer
      Environment:
        Variables:
          CLICKUP_SECRET_NAME: 'clickup/api/token'
          SLACK_MAINTENANCE_BOT_SECRET_NAME: 'prod/slack-maintenance-bot-token'
          LIST_ID: '901320662208'
          PURCHASE_REQUEST_LIST_ID: '901310302436'
          WORKSPACE_FIELD_ID: 'f4923783-74db-42ca-bda3-82bbca58abfe'
          SUPPLIER_LINK_FIELD_ID: 'c25e5cb5-e38f-4ae7-adae-d3620d9157bc'
          REQUESTOR_NAME_FIELD_ID: '6ec94778-d4a6-4f54-94a6-59769db1ba57'
          ITEM_TYPE_FIELD_ID: 'f73725e4-d2fa-4187-9241-712af6fadb89'
      Events:
        ApiTrigger:
          Type: Api
          Properties:
            Path: /FacilitiesSlackPurchaseReorder
            Method: post
            RestApiId: !Ref FacilitiesApi
      Tags:
        Project: facilities-item-reorder
        Workspace: facilities

# Add this entire section to the end of your file
Outputs:
  FacilitiesApiUrl:
    Description: "The invoke URL for the Facilities API Gateway"
    Value: !Sub "https://${FacilitiesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
